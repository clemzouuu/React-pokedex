{"ast":null,"code":"var _jsxFileName = \"/Users/clemzouuu/Desktop/Code/React-pokedex/react-pokemon-app/src/components/pokemon-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PokemonForm = _ref => {\n  _s();\n\n  let {\n    pokemon\n  } = _ref;\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const history = useHistory();\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  const handleSumbit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      history.push(`/pokemons/${pokemon.id}`);\n    }\n  };\n\n  const validateForm = () => {\n    let newForm = form; // Validator name\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => handleSumbit(e),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s12 m8 offset-m2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card hoverable\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pokemon.picture,\n              alt: pokemon.name,\n              style: {\n                width: '250px',\n                margin: '0 auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-stacked\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"name\",\n                  children: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"name\",\n                  name: \"name\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  value: form.name.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 19\n                }, this), form.name.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red accent-1\",\n                  children: form.name.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"hp\",\n                  children: \"Point de vie\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"hp\",\n                  name: \"hp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.hp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 19\n                }, this), form.name.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red accent-1\",\n                  children: form.name.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"cp\",\n                  children: \"D\\xE9g\\xE2ts\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"cp\",\n                  name: \"cp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.cp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Types\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 19\n                }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginBottom: '10px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      id: type,\n                      type: \"checkbox\",\n                      className: \"filled-in\",\n                      value: type,\n                      checked: hasType(type),\n                      onChange: e => selectType(type, e)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: formatType(type),\n                        children: type\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 178,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 23\n                  }, this)\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-action center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn\",\n                children: \"Valider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PokemonForm, \"fe5qplRstPCd+3pEM73zZz7KNwI=\", false, function () {\n  return [useHistory];\n});\n\n_c = PokemonForm;\nexport default PokemonForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"sources":["/Users/clemzouuu/Desktop/Code/React-pokedex/react-pokemon-app/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonForm","pokemon","form","setForm","name","value","isValid","hp","cp","types","history","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","handleSumbit","preventDefault","isFormValid","validateForm","push","id","newForm","test","errorMsg","error","isTypesValid","length","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport {useHistory} from 'react-router-dom'\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\n  \ntype Props = {\n  pokemon: Pokemon\n};\n  \ntype Field = {\n    value?:any,\n    error?:string,\n    isValid?:boolean\n}\n\ntype Form = {\n    name:Field,\n    hp:Field,\n    cp:Field,\n    types:Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n\n\n    const [form,setForm] = useState<Form>({\n        name:{ value:pokemon.name , isValid:true},\n        hp:{ value:pokemon.hp , isValid:true},\n        cp:{ value:pokemon.cp , isValid:true},\n        types: { value:pokemon.types , isValid:true}\n       })\n\n       const history = useHistory()\n  \n    const types: string[] = [\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n    ];\n\n    const hasType = (type:string):boolean => {\n        return form.types.value.includes(type)\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName : string = e.target.name\n        const fieldValue : string = e.target.value\n        const newField : Field = {[fieldName] : {value:fieldValue}}\n\n        setForm({...form,...newField})\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n    \n        if(checked) {\n          // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.concat([type]);\n          newField = { value: newTypes };\n        } else {\n          // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n          newField = { value: newTypes };\n        }\n    \n        setForm({...form, ...{ types: newField }});\n      }\n\n      const handleSumbit = (e:React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const isFormValid = validateForm()\n        if(isFormValid){\n            history.push(`/pokemons/${pokemon.id}`)\n        }\n       \n      }\n\n      const validateForm = () => {\n        let newForm: Form = form;\n        \n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n          const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ name: newField } };\n        } else {\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ name: newField } };\n        }\n    \n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n          const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ hp: newField } };\n        }\n    \n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n          const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n          newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ cp: newField } };\n        }\n    \n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n      }\n    \n      const isTypesValid = (type: string): boolean => {\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n        if (form.types.value.length === 1 && hasType(type)) {\n          return false;\n        }\n        \n        // Cas n°1: Le pokémon a au moins 3 types.\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n        if (form.types.value.length >= 3 && !hasType(type)) { \n          return false; \n        } \n        \n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n        return true;\n      }\n    \n   \n  return (\n    <form onSubmit={e => handleSumbit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\"  name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {}\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange ={e => selectType(type,e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}