{"ast":null,"code":"var _jsxFileName = \"/Users/clemzouuu/Desktop/Code/react/react-pokemon-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// 1er Composant qui apparait à l'écran\nimport React, { useState, useEffect } from 'react'; // On importe react, on rajoute (le hook d'état) useState et le hook d'effet\n\nimport POKEMONS from './models/mock-pokemon'; // On type le composant App ave React.FC (Composant peut être fonction ou classe)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // FunctionCompenent = composant écrit avec une fonction \n  const [pokemons, setPokemons] = useState([]); // On utilise un State au lieu d'une const avec useState // <> = Typage des données pour TypeScript\n  // Tableau vide en 2eme arg, revient au 1er état du cycle de vie du hook \n  // etat actuel +                // useState prend en arg l'état initial du composant\n  //  fonction pour modifier la valeur de l'état      \n\n  useEffect(() => {\n    setPokemons(POKEMONS);\n  }, []); // Tableau pour continuer à mettre à j l'affichage, état 1 et 2 du hook\n  // Méthodes liée à un événement du DOM\n\n  const showPokemonsCount = () => {\n    console.log(pokemons.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pok\\xE9dex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: showPokemonsCount,\n      children: \" pok\\xE9mons dans le Pok\\xE9dex.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), pokemons.map(_ref => {\n      let {\n        id,\n        name,\n        picture,\n        created\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s6 m4\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: picture,\n          alt: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"mczcIla7rt/rZo7CXFYbda6ZoMU=\");\n\n_c = App;\nexport default App; // Exporter le composant pour l'utiliser ailleurs dans l'app\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/clemzouuu/Desktop/Code/react/react-pokemon-app/src/App.tsx"],"names":["React","useState","useEffect","POKEMONS","App","pokemons","setPokemons","showPokemonsCount","console","log","length","map","id","name","picture","created"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgCC,QAAhC,EAAyCC,SAAzC,QAAyD,OAAzD,C,CAAkE;;AAElE,OAAOC,QAAP,MAAqB,uBAArB,C,CAEA;;;;AACA,MAAMC,GAAsB,GAAG,MAAM;AAAA;;AAAE;AACtC,QAAK,CAACC,QAAD,EAAUC,WAAV,IAAyBL,QAAQ,CAAY,EAAZ,CAAtC,CADoC,CACkB;AACC;AACxD;AACA;;AACCC,EAAAA,SAAS,CAAC,MAAK;AACXI,IAAAA,WAAW,CAACH,QAAD,CAAX;AACH,GAFQ,EAEP,EAFO,CAAT,CALoC,CAO7B;AAER;;AACA,QAAMI,iBAAiB,GAAG,MAAK;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,MAArB;AACH,GAFD;;AAIC,sBACC;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,OAAO,EAAIH,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGOF,QAAQ,CAACM,GAAT,CAAa;AAAA,UAAC;AAACC,QAAAA,EAAD;AAAIC,QAAAA,IAAJ;AAASC,QAAAA,OAAT;AAAiBC,QAAAA;AAAjB,OAAD;AAAA,0BACV;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAK,UAAA,GAAG,EAAED,OAAV;AAAmB,UAAA,GAAG,EAAID;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAgCD,EAAhC;AAAA;AAAA;AAAA;AAAA,cADU;AAAA,KAAb,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,CA3BD;;GAAMR,G;;KAAAA,G;AA6BN,eAAeA,GAAf,C,CAAoB","sourcesContent":["// 1er Composant qui apparait à l'écran\nimport React,{FunctionComponent,useState,useEffect} from 'react'; // On importe react, on rajoute (le hook d'état) useState et le hook d'effet\nimport Pokemon from './models/pokemon';\nimport POKEMONS from './models/mock-pokemon';\n\n// On type le composant App ave React.FC (Composant peut être fonction ou classe)\nconst App: FunctionComponent = () => { // FunctionCompenent = composant écrit avec une fonction \n const[pokemons,setPokemons] = useState<Pokemon[]>([]) // On utilise un State au lieu d'une const avec useState // <> = Typage des données pour TypeScript\n                                                        // Tableau vide en 2eme arg, revient au 1er état du cycle de vie du hook \n// etat actuel +                // useState prend en arg l'état initial du composant\n//  fonction pour modifier la valeur de l'état      \n useEffect(()=> {\n     setPokemons(POKEMONS);\n },[]); // Tableau pour continuer à mettre à j l'affichage, état 1 et 2 du hook\n\n// Méthodes liée à un événement du DOM\nconst showPokemonsCount = () =>{\n    console.log(pokemons.length)\n}\n \n return ( \n  <div>\n      <h1>Pokédex</h1>\n      <p onClick = {showPokemonsCount}> pokémons dans le Pokédex.</p>\n        {pokemons.map(({id,name,picture,created})=> (\n            <div className=\"col s6 m4\" key={id}>\n                <img src={picture} alt = {name}/>\n                <p>{name}</p>\n\n            </div>\n        ))}\n  </div>\n )  \n}\n  \nexport default App; // Exporter le composant pour l'utiliser ailleurs dans l'app\n"]},"metadata":{},"sourceType":"module"}